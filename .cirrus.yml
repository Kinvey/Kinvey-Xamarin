task:
  name: macOS .Net
  osx_instance:
    image: high-sierra-xcode-9.4.1
  env:
    PATH: $PATH:/usr/local/share/dotnet
  install_dotnet_sdk_script: brew cask install dotnet-sdk
  check_version_script: dotnet --version
  build_sqlite-net_script: cd sqlite-net/nuget/SQLite-net-std; dotnet build
  test_script: cd Kinvey.Tests; dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

task:
  name: macOS Mono
  osx_instance:
    image: high-sierra-xcode-9.4.1
  env:
    PATH: $PATH:/Library/Frameworks/Mono.framework/Versions/Current/Commands
  install_mono_sdk_script: brew cask install mono-mdk
  check_version_script: mono --version

# task:
#   name: Windows
#   windows_container:
#     image: microsoft/windowsservercore:ltsc2016
#   env:
#     CIRRUS_SHELL: powershell
#     PATH: '$PATH;$USERPROFILE\AppData\Local\Microsoft\dotnet;C:\ProgramData\chocolatey\bin;C:\ProgramData\chocolatey\lib\SQLite\tools'
#   install_dotnet_sdk_script: "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; &([scriptblock]::Create((Invoke-WebRequest -useb 'https://dot.net/v1/dotnet-install.ps1'))) -Channel 2.1"
#   check_dotnet_version_script: dotnet --version
#   install_choco_script: Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
#   check_choco_version_script: choco upgrade pgkname --noop
#   install_sqlite_script: choco install sqlite -y
#   check_sqlite_version_script: sqlite3 -version
#   test_script: cd Kinvey.Tests; dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover; exit $LastExitCode

task:
  name: Linux .Net
  container:
    image: microsoft/dotnet
  check_version_script: dotnet --version
  apt_update_script: apt update
  install_sqlite_script: apt install libsqlite3-dev sqlite3 -y
  check_sqlite3_version_script: sqlite3 -version
  build_sqlite-net_script: cd sqlite-net/nuget/SQLite-net-std; dotnet build
  test_script: cd Kinvey.Tests; dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

task:
  name: Linux Mono
  container:
    image: mono
  env:
    DOTNET_ROOT: /root/.dotnet
    PATH: $PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools
  check_version_script: mono --version
  apt_update_script: apt update
  install_node_script: apt install nodejs npm -y; ln -s nodejs /usr/bin/node
  install_icu_devtools_script: apt install icu-devtools -y
  install_gnomon_script: npm install -g gnomon
  install_dotnet_script: curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel 2.1
  install_coverlet_script: dotnet tool install --global coverlet.console
  nuget_restore_script: nuget restore Kinvey.sln
  build_sqlite-net_script: cd sqlite-net/nuget/SQLite-net-std; dotnet build
  build_script: msbuild TestFramework/Tests.Integration/Tests.Integration.csproj
  test_script: (echo "Running Unit Tests"; coverlet TestFramework/Tests.Integration/bin/Debug/Tests.Integration.dll --target "mono" --targetargs "--debug packages/NUnit.ConsoleRunner.3.8.0/tools/nunit3-console.exe TestFramework/Tests.Integration/bin/Debug/Tests.Integration.dll" --format opencover) | gnomon --real-time=1000
